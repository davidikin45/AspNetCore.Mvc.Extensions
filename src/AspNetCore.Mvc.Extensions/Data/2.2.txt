https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-entity-framework-core-2-2/
--Collections of owned entities

Owned types = Complex Types

if you can’t make a value object immutable, then it is not a value object.

A simpler version of that technique is to compare a value object to an integer. Do you really care if the integer 5 is the same 5 that you used in another method? Definitely not, all fives in your application are the same regardless of how they were instantiated. That makes an integer essentially a value object. Now, ask yourself, is this notion in your domain looks like integer? If the answer is yes, then it’s a value object.

You care about what they are, not who they are. Examples include numbers and strings, but can also be higher-level concepts like groups of attributes.

EF Core 2.0 added the ability to model ownership in one-to-one associations. EF Core 2.2 extends the ability to express ownership to one-to-many associations. Ownership helps constrain how entities are used.
For example, owned entities: – Can only ever appear on navigation properties of other entity types. – Are automatically loaded, and can only be tracked by a DbContext alongside their owner.
In relational databases, owned collections are mapped to separate tables from the owner, just like regular one-to-many associations. But in document-oriented databases, we plan to nest owned entities (in owned collections or references) within the same document as the owner.
You can use the feature by calling the new OwnsMany() API:
modelBuilder.Entity<Customer>().OwnsMany(c => c.Addresses); [Owned] also works for collections. Id Generation only works for SqlServer.
Are automatically loaded, and can only be tracked by a DbContext alongside their owner.
Can have owned collections of valueobjects and also entities.

[Owned]
public class StreetAddress
{
    public int Id { get; set; } //Only needed for collections. EF Will add this automatically but best to have in order to update.
    public int ParentId { get; set; } //EF Will add this automatically as a shadow property. No need to add this.

    public string Street { get; set; }
    public string City { get; set; }
}

By convention, EF Core will name the database columns for the properties of the owned entity type following the pattern Navigation_OwnedEntityProperty. Therefore the StreetAddress properties will appear in the 'Orders' table with the names 'ShippingAddress_Street' and 'ShippingAddress_City'.

--Spatial data support
Spatial data can be used to represent the physical location and shape of objects. Many databases can natively store, index, and query spatial data. Common scenarios include querying for objects within a given distance, and testing if a polygon contains a given location. EF Core 2.2 now supports working with spatial data from various databases using types from the NetTopologySuite (NTS) library.
Spatial data support is implemented as a series of provider-specific extension packages. Each of these packages contributes mappings for NTS types and methods, and the corresponding spatial types and functions in the database. Such provider extensions are now available for SQL Server, SQLite, and PostgreSQL (from the Npgsql project). Spatial types can be used directly with the EF Core in-memory provider without additional extensions.
Once the provider extension is installed, you can add properties of supported types to your entities. For example:
using NetTopologySuite.Geometries;

namespace MyApp
{
  public class Friend
  {
    [Key]
    public string Name { get; set; }

    [Required]
    public Point Location { get; set; }
  }
}

Installing
In order to use spatial data with EF Core, you need to install the appropriate supporting NuGet package. Which package you need to install depends on the provider you're using.
EF Core Provider
Spatial NuGet Package
Microsoft.EntityFrameworkCore.SqlServer
Microsoft.EntityFrameworkCore.SqlServer.NetTopologySuite
Microsoft.EntityFrameworkCore.Sqlite
Microsoft.EntityFrameworkCore.Sqlite.NetTopologySuite
Microsoft.EntityFrameworkCore.InMemory
NetTopologySuite
Npgsql.EntityFrameworkCore.PostgreSQL
Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite

Migrations for SQLite and SQL Server
 .Annotation("Sqlite:Autoincrement", true)


- Encapsulate Collection
https://ardalis.com/encapsulated-collections-in-entity-framework-core
https://technet.microsoft.com/en-us/mt842503.aspx
private readonly List<Role> _list = new List<Role>();
public virtual IReadOnlyList<Role> List => _list.AsReadOnly();
public void AddEntry(Role role)
{
    _list.Add(entry);
    Events.Add(new EntryAddedEvent(this.Id, entry));
}

https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/implement-value-objects
https://www.nankov.com/posts/improved-support-value-objects-ef-core-22
https://enterprisecraftsmanship.com/posts/value-object-better-implementation/
https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/microservice-domain-model

modelBuilder.Entity<Customer>().OwnsOne(o => o.Address);
modelBuilder.Entity<Customer>().OwnsMany(c => c.Addresses);
[Owned]

Owned just means it is loaded automatically as part of aggregate,

Entity Owner = Aggregate Root

An aggregate is composed of at least one entity: the aggregate root, also called root entity or primary entity. Additionally, it can have multiple child entities and value objects, with all entities and objects working together to implement required behavior and transactions.

The purpose of an aggregate root is to ensure the consistency of the aggregate; it should be the only entry point for updates to the aggregate through methods or operations in the aggregate root class. You should make changes to entities within the aggregate only via the aggregate root. It is the aggregate’s consistency guardian, considering all the invariants and consistency rules you might need to comply with in your aggregate. If you change a child entity or value object independently, the aggregate root cannot ensure that the aggregate is in a valid state. It would be like a table with a loose leg. Maintaining consistency is the main purpose of the aggregate root.

In order to maintain separation of aggregates and keep clear boundaries between them, it is a good practice in a DDD domain model to disallow direct navigation between aggregates and only having the foreign key (FK) field, as implemented in the Ordering microservice domain model in eShopOnContainers. The Order entity only has a FK field for the buyer, but not an EF Core navigation property, as shown in the following code:

One of the key features of an aggregate root is the external objects are not allowed to holds a reference to an aggregate root child entities. Thus if you need access to one of the aggregate root child entities (a.k.a aggregate), then you must go through the aggregate root (i.e. you can't access the child directly).

//Delete Behaviour for nullable foreign key
| Behavior Name           | Effect on dependent/child in memory    | Effect on dependent/child in database  |
|-------------------------|----------------------------------------|----------------------------------------|
| Cascade                 | Entities are deleted                   | Entities are deleted                   |
| ClientSetNull (Default) | Foreign key properties are set to null | None                                   |
| SetNull                 | Foreign key properties are set to null | Foreign key properties are set to null |
| Restrict                | None                                   | None                                   |

//Delete Behaviour for non-nullable foreign key
| Behavior Name     | Effect on dependent/child in memory | Effect on dependent/child in database |
|-------------------|-------------------------------------|---------------------------------------|
| Cascade (Default) | Entities are deleted                | Entities are deleted                  |
| ClientSetNull     | SaveChanges throws                  | None                                  |
| SetNull           | SaveChanges throws                  | SaveChanges throws                    |
| Restrict          | None                                | None                                  |

//EnsureCreated will seed HasData()
//HasData will be included in Migrations

//Only need to include DbSet for AggregateRoot. Not for ChildEntity or Owned Collection Types